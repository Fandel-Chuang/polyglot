// ========================================
// 文达编程语言标准库 - 控制台输入输出模块（中文版）
// Console IO Module for 文达 Language (Chinese)
// ========================================

》》 “核心/类型”

// 控制台输出函数
打印（消息： 字符串） {
    控制台打印（消息）
}

打印（数值： 整数） {
    控制台打印（转换为字符串（数值））
}

打印（数值： 双精度浮点数） {
    控制台打印（转换为字符串（数值））
}

打印（数值： 布尔） {
    控制台打印（转换为字符串（数值））
}

打印（数值： 字符） {
    控制台打印（字符转字符串（数值））
}

// 格式化打印
格式化打印（格式： 字符串， 参数： ...） {
    控制台格式化打印（格式， 参数）
}

打印行（消息： 字符串） {
    控制台打印（消息 ＋ “\n”）
}

打印行（数值： 整数） {
    控制台打印（转换为字符串（数值） ＋ “\n”）
}

打印行（数值： 双精度浮点数） {
    控制台打印（转换为字符串（数值） ＋ “\n”）
}

打印行（数值： 布尔） {
    控制台打印（转换为字符串（数值） ＋ “\n”）
}

// 控制台输入函数
输入（） －》 字符串 {
    《- 控制台输入（）
}

输入（提示： 字符串） －》 字符串 {
    控制台打印（提示）
    《- 控制台输入（）
}

// 类型安全输入函数
输入整数（） －》 可选＜整数＞ {
    ？ 文本 ＝ 控制台输入（）
    《- 转换为整数（文本）
}

输入整数（提示： 字符串） －》 可选＜整数＞ {
    控制台打印（提示）
    ？ 文本 ＝ 控制台输入（）
    《- 转换为整数（文本）
}

输入浮点数（） －》 可选＜双精度浮点数＞ {
    ？ 文本 ＝ 控制台输入（）
    《- 转换为浮点数（文本）
}

输入浮点数（提示： 字符串） －》 可选＜双精度浮点数＞ {
    控制台打印（提示）
    ？ 文本 ＝ 控制台输入（）
    《- 转换为浮点数（文本）
}

输入布尔（） －》 可选＜布尔＞ {
    ？ 文本 ＝ 控制台输入（）．去除空白（）．转为小写（）
    （文本 ＝＝ “真” ｜｜ 文本 ＝＝ “1” ｜｜ 文本 ＝＝ “是” ｜｜ 文本 ＝＝ “对”）？ {
        《- 可选＜布尔＞（真）
    } ： （文本 ＝＝ “假” ｜｜ 文本 ＝＝ “0” ｜｜ 文本 ＝＝ “否” ｜｜ 文本 ＝＝ “错”）？ {
        《- 可选＜布尔＞（假）
    } ： {
        《- 可选＜布尔＞（）
    }
}

输入布尔（提示： 字符串） －》 可选＜布尔＞ {
    控制台打印（提示）
    《- 输入布尔（）
}

// 高级控制台函数
清屏（） {
    控制台清屏（）
}

设置光标位置（横： 整数， 纵： 整数） {
    控制台设置光标（横， 纵）
}

获取光标位置（） －》 （整数， 整数） {
    《- 控制台获取光标（）
}

// 颜色输出支持
@ 颜色 {
    红色： 整数 ＝ 31，
    绿色： 整数 ＝ 32，
    黄色： 整数 ＝ 33，
    蓝色： 整数 ＝ 34，
    紫色： 整数 ＝ 35，
    青色： 整数 ＝ 36，
    白色： 整数 ＝ 37，
    重置： 整数 ＝ 0
}

彩色打印（消息： 字符串， 颜色： 整数） {
    控制台打印（“\x1b[” ＋ 转换为字符串（颜色） ＋ “m” ＋ 消息 ＋ “\x1b[0m”）
}

彩色打印行（消息： 字符串， 颜色： 整数） {
    彩色打印（消息 ＋ “\n”， 颜色）
}

// 控制台工具
暂停（） {
    控制台打印（“按任意键继续...”）
    控制台输入（）
}

暂停（消息： 字符串） {
    控制台打印（消息）
    控制台输入（）
}

// 错误输出
错误打印（消息： 字符串） {
    控制台错误打印（消息）
}

错误打印行（消息： 字符串） {
    控制台错误打印（消息 ＋ “\n”）
}

// 进度条工具
@ 进度条 {
    宽度： 整数
    填充字符： 字符
    空白字符： 字符

    进度条（宽度： 整数） {
        ＿．宽度 ＝ 宽度
        ＿．填充字符 ＝ '█'
        ＿．空白字符 ＝ '░'
    }

    进度条（宽度： 整数， 填充： 字符， 空白： 字符） {
        ＿．宽度 ＝ 宽度
        ＿．填充字符 ＝ 填充
        ＿．空白字符 ＝ 空白
    }

    显示（进度： 双精度浮点数， 消息： 字符串） {
        ？ 已填充 ＝ （进度 ＊ ＿．宽度 as 双精度浮点数） as 整数
        ？ 未填充 ＝ ＿．宽度 － 已填充

        控制台打印（“\r” ＋ 消息 ＋ “ [”）
        ＾（i in 0..已填充） {
            控制台打印（＿．填充字符．转换为字符串（））
        }
        ＾（i in 0..未填充） {
            控制台打印（＿．空白字符．转换为字符串（））
        }
        控制台打印（“] ” ＋ 转换为字符串（（进度 ＊ 100.0） as 整数） ＋ “%”）
    }

    完成（消息： 字符串） {
        控制台打印（“\r” ＋ 消息 ＋ “ [”）
        ＾（i in 0..＿．宽度） {
            控制台打印（＿．填充字符．转换为字符串（））
        }
        控制台打印（“] 100%\n”）
    }
}

// 表格格式化工具
@ 表格 {
    表头： 数组＜字符串＞
    行数据： 数组＜数组＜字符串＞＞
    列宽度： 数组＜整数＞

    表格（表头： 数组＜字符串＞） {
        ＿．表头 ＝ 表头
        ＿．行数据 ＝ 数组＜数组＜字符串＞＞（）
        ＿．列宽度 ＝ 数组＜整数＞（）

        // 根据表头初始化列宽度
        ＾（标题 in 表头） {
            ＿．列宽度．推入（标题．长度（））
        }
    }

    添加行（行： 数组＜字符串＞） {
        ＿．行数据．推入（行）

        // 更新列宽度
        ＾（i in 0..行．长度（）） {
            （i ＜ ＿．列宽度．长度（））？ {
                ＿．列宽度［i］ ＝ 最大值（＿．列宽度［i］， 行［i］．长度（））
            }
        }
    }

    打印（） {
        // 打印表头
        控制台打印（“┌”）
        ＾（i in 0..＿．表头．长度（）） {
            ＾（j in 0..＿．列宽度［i］ ＋ 2） {
                控制台打印（“─”）
            }
            （i ＜ ＿．表头．长度（） － 1）？ {
                控制台打印（“┬”）
            }
        }
        控制台打印（“┐\n”）

        控制台打印（“│ ”）
        ＾（i in 0..＿．表头．长度（）） {
            控制台打印（＿．表头［i］．右对齐（＿．列宽度［i］））
            控制台打印（“ │ ”）
        }
        控制台打印（“\n”）

        // 打印分隔线
        控制台打印（“├”）
        ＾（i in 0..＿．表头．长度（）） {
            ＾（j in 0..＿．列宽度［i］ ＋ 2） {
                控制台打印（“─”）
            }
            （i ＜ ＿．表头．长度（） － 1）？ {
                控制台打印（“┼”）
            }
        }
        控制台打印（“┤\n”）

        // 打印行数据
        ＾（行 in ＿．行数据） {
            控制台打印（“│ ”）
            ＾（i in 0..行．长度（）） {
                控制台打印（行［i］．右对齐（＿．列宽度［i］））
                控制台打印（“ │ ”）
            }
            控制台打印（“\n”）
        }

        // 打印底部边框
        控制台打印（“└”）
        ＾（i in 0..＿．表头．长度（）） {
            ＾（j in 0..＿．列宽度［i］ ＋ 2） {
                控制台打印（“─”）
            }
            （i ＜ ＿．表头．长度（） － 1）？ {
                控制台打印（“┴”）
            }
        }
        控制台打印（“┘\n”）
    }
}
