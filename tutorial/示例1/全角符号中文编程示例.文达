// polyglot 全角符号纯中文编程示例
// 展示 polyglot 语言的全角符号中文编程能力

主函数（） ｛
    》》（「＝＝＝ polyglot 全角符号纯中文编程示例 ＝＝＝」）

    // 1. 中文变量和基本操作
    》》（「
１． 中文变量：」）
    ？ 姓名 ＝ 「张三」
    ？ 年龄 ＝ 25
    ？ 身高 ＝ 175.5
    ？ 是学生 ＝ true

    》》（「姓名： 」 ＋ 姓名）
    》》（「年龄： 」 ＋ 年龄）
    》》（「身高： 」 ＋ 身高 ＋ 「ｃｍ」）
    》》（「是否为学生： 」 ＋ 是学生）

    // 2. 中文数学运算
    》》（「
２． 数学计算：」）
    ？ 数学成绩 ＝ 85
    ？ 语文成绩 ＝ 92
    ？ 英语成绩 ＝ 78
    ？ 总分 ＝ 数学成绩 ＋ 语文成绩 ＋ 英语成绩
    ？ 平均分 ＝ 总分 ／ 3.0

    》》（「数学： 」 ＋ 数学成绩 ＋ 「分」）
    》》（「语文： 」 ＋ 语文成绩 ＋ 「分」）
    》》（「英语： 」 ＋ 英语成绩 ＋ 「分」）
    》》（「总分： 」 ＋ 总分 ＋ 「分」）
    》》（「平均分： 」 ＋ 平均分 ＋ 「分」）

    // 3. 中文条件判断
    》》（「
３． 成绩评级：」）
    ？ 等级 ＝ 「」
    （平均分 》＝ 90） ？ ｛
        等级 ＝ 「优秀」
    ｝ ： （平均分 》＝ 80） ？ ｛
        等级 ＝ 「良好」
    ｝ ： （平均分 》＝ 70） ？ ｛
        等级 ＝ 「中等」
    ｝ ： （平均分 》＝ 60） ？ ｛
        等级 ＝ 「及格」
    ｝ ： ｛
        等级 ＝ 「不及格」
    ｝
    》》（「成绩等级： 」 ＋ 等级）

    // 4. 中文数组操作
    》》（「
４． 课程列表：」）
    ？ 课程列表 ＝ ［「数学」， 「语文」， 「英语」， 「物理」， 「化学」］
    ？ 索引 ＝ 0

    》》（「本学期课程：」）
    ＾（索引 ＜ 课程数量（课程列表）） ｛
        》》（（索引 ＋ 1） ＋ 「． 」 ＋ 课程列表［索引］）
        索引 ＝ 索引 ＋ 1
    ｝

    // 5. 中文循环结构
    》》（「
５． 倒计时：」）
    ？ 倒计时 ＝ 5
    ＾（倒计时 ＞ 0） ｛
        》》（「倒计时： 」 ＋ 倒计时）
        倒计时 ＝ 倒计时 － 1
    ｝
    》》（「时间到！」）

    // 6. 使用中文对象
    》》（「
６． 学生信息管理：」）
    ？ 学生1 ＝ 学生（「李四」， 20， 「计算机科学」）
    ？ 学生2 ＝ 学生（「王五」， 19， 「数学系」）

    学生1．显示信息（）
    学生2．显示信息（）

    // 计算年龄差
    ？ 年龄差 ＝ 学生1．获取年龄差（学生2）
    》》（「两位学生年龄相差： 」 ＋ 年龄差 ＋ 「岁」）

    // 7. 中文模式匹配
    》》（「
７． 星期判断：」）
    ？ 今天 ＝ 3
    ？ 星期名 ＝ 「」

    ＃（今天） ｛
        1 ＝》 星期名 ＝ 「星期一」，
        2 ＝》 星期名 ＝ 「星期二」，
        3 ＝》 星期名 ＝ 「星期三」，
        4 ＝》 星期名 ＝ 「星期四」，
        5 ＝》 星期名 ＝ 「星期五」，
        6 ＝》 星期名 ＝ 「星期六」，
        7 ＝》 星期名 ＝ 「星期日」，
        ＿ ＝》 星期名 ＝ 「无效日期」
    ｝
    》》（「今天是： 」 ＋ 星期名）

    // 8. 中文函数调用
    》》（「
８． 问候语生成：」）
    ？ 问候语 ＝ 生成问候语（姓名， 年龄）
    》》（问候语）

    ？ 祝福语 ＝ 根据时间生成祝福（「上午」）
    》》（祝福语）

    // 9. 颜色枚举示例
    》》（「
９． 颜色处理：」）
    ？ 红色 ＝ 颜色：：红色
    ？ 蓝色 ＝ 颜色：：蓝色
    ？ 自定义橙色 ＝ 颜色：：自定义颜色（255， 128， 0）

    》》（「红色： 」 ＋ 颜色转字符串（红色））
    》》（「蓝色： 」 ＋ 颜色转字符串（蓝色））
    》》（「自定义橙色： 」 ＋ 颜色转字符串（自定义橙色））

    《- 0
｝

// 学生类定义 - 使用中文
＠ 学生 ｛
    姓名： 字符串，
    年龄： 整数，
    专业： 字符串
｝

// 学生类实现
＆ 学生 ｛
    // 中文构造函数
    学生（姓名： 字符串， 年龄： 整数， 专业： 字符串） ｛
        《- 学生 ｛
            姓名： 姓名，
            年龄： 年龄，
            专业： 专业
        ｝
    ｝

    // 显示学生信息
    显示信息（） ｛
        》》（「学生信息：」）
        》》（「  姓名： 」 ＋ ＿．姓名）
        》》（「  年龄： 」 ＋ ＿．年龄 ＋ 「岁」）
        》》（「  专业： 」 ＋ ＿．专业）
    ｝

    // 获取年龄
    获取年龄（） －》 整数 ｛
        《- ＿．年龄
    ｝

    // 计算与另一个学生的年龄差
    获取年龄差（其他学生： 学生） －》 整数 ｛
        ？ 差值 ＝ ＿．年龄 － 其他学生．年龄
        （差值 ＜ 0） ？ ｛
            《- －差值
        ｝ ： ｛
            《- 差值
        ｝
    ｝

    // 判断是否成年
    是否成年（） －》 布尔 ｛
        《- ＿．年龄 》＝ 18
    ｝

    // 更新年龄
    过生日（） ｛
        ＿．年龄 ＋＝ 1
        》》（＿．姓名 ＋ 「 生日快乐！现在」 ＋ ＿．年龄 ＋ 「岁了。」）
    ｝

    // 析构函数
    ～学生（） ｛
        》》（「学生对象已销毁： 」 ＋ ＿．姓名）
        ＿．姓名 ＝ 「」
    ｝
｝

// 中文辅助函数
生成问候语（姓名： 字符串， 年龄： 整数） －》 字符串 ｛
    （年龄 ＜ 18） ？ ｛
        《- 「你好，」 ＋ 姓名 ＋ 「小朋友！」
    ｝ ： （年龄 ＜ 60） ？ ｛
        《- 「你好，」 ＋ 姓名 ＋ 「！」
    ｝ ： ｛
        《- 「您好，」 ＋ 姓名 ＋ 「老师！」
    ｝
｝

// 根据时间生成祝福语
根据时间生成祝福（时段： 字符串） －》 字符串 ｛
    ＃（时段） ｛
        「上午」 ＝》 《- 「早上好！祝您有美好的一天！」，
        「下午」 ＝》 《- 「下午好！工作顺利！」，
        「晚上」 ＝》 《- 「晚上好！祝您休息愉快！」，
        ＿ ＝》 《- 「你好！祝您一切顺利！」
    ｝
｝

// 计算课程数量
课程数量（课程数组） －》 整数 ｛
    《- 5  // 简化实现
｝

// 数学计算函数
计算平方（数字： 浮点数） －》 浮点数 ｛
    《- 数字 ＊ 数字
｝

// 判断奇偶数
是奇数（数字： 整数） －》 布尔 ｛
    《- （数字 ％ 2） ＝＝ 1
｝

// 计算阶乘
阶乘（数字： 整数） －》 整数 ｛
    （数字 ＜＝ 1） ？ ｛
        《- 1
    ｝ ： ｛
        《- 数字 ＊ 阶乘（数字 － 1）
    ｝
｝

// 枚举类型示例 - 使用全角符号
＃ 颜色 ｛
    红色，
    绿色，
    蓝色，
    自定义颜色（红： 整数， 绿： 整数， 蓝： 整数）
｝

// 颜色转字符串函数
颜色转字符串（颜色： 颜色） －》 字符串 ｛
    ＃（颜色） ｛
        颜色：：红色 ＝》 《- 「红色」，
        颜色：：绿色 ＝》 《- 「绿色」，
        颜色：：蓝色 ＝》 《- 「蓝色」，
        颜色：：自定义颜色（红， 绿， 蓝） ＝》 《- 「RGB（」 ＋ 红 ＋ 「， 」 ＋ 绿 ＋ 「， 」 ＋ 蓝 ＋ 「）」
    ｝
｝

// 接口定义示例
％ 可移动 ｛
    移动到（位置： 坐标） －》 布尔
    获取位置（） －》  坐标
    设置速度（速度： 浮点数）
｝

// 坐标结构
＠ 坐标 ｛
    x： 浮点数，
    y： 浮点数，
    z： 浮点数
｝

＆ 坐标 ｛
    坐标（x： 浮点数， y： 浮点数， z： 浮点数） ｛
        《- 坐标 ｛ x： x， y： y， z： z ｝
    ｝

    距离计算（其他： 坐标） －》 浮点数 ｛
        ？ dx ＝ ＿．x － 其他．x
        ？ dy ＝ ＿．y － 其他．y
        ？ dz ＝ ＿．z － 其他．z
        《- 平方根（dx＊dx ＋ dy＊dy ＋ dz＊dz）
    ｝

    转为字符串（） －》 字符串 ｛
        《- 「（」 ＋ ＿．x ＋ 「， 」 ＋ ＿．y ＋ 「， 」 ＋ ＿．z ＋ 「）」
    ｝
｝

// 实现可移动接口的玩家类
＠ 玩家 ｛
    姓名： 字符串，
    位置： 坐标，
    速度： 浮点数
｝

＆ 玩家 ％ 可移动 ｛
    玩家（姓名： 字符串， 初始位置： 坐标） ｛
        《- 玩家 ｛
            姓名： 姓名，
            位置： 初始位置，
            速度： 0.0
        ｝
    ｝

    移动到（新位置： 坐标） －》 布尔 ｛
        ？ 距离 ＝ ＿．位置．距离计算（新位置）
        （距离 》 1000.0） ？ ｛
            》》（「距离太远，无法移动」）
            《- false
        ｝ ： ｛
            ＿．位置 ＝ 新位置
            》》（＿．姓名 ＋ 「 移动到 」 ＋ 新位置．转为字符串（））
            《- true
        ｝
    ｝

    获取位置（） －》 坐标 ｛
        《- ＿．位置
    ｝

    设置速度（新速度： 浮点数） ｛
        ＿．速度 ＝ 新速度
        》》（＿．姓名 ＋ 「 的速度设置为 」 ＋ 新速度）
    ｝
｝

// 常量定义示例 - 使用全角符号和中文引号
＊ 圆周率 ＝ 3.14159265359
＊ 公司名称 ＝ 「polyglot 科技有限公司」
＊ 最大用户数 ＝ 10000
＊ 是生产环境 ＝ false
＊ 版本信息 ＝ 「v1.0.0 全角符号中文版」
＊ 作者信息 ＝ 「polyglot 开发团队」

// 辅助数学函数
平方根（数值： 浮点数） －》 浮点数 ｛
    《- 数值 ＊＊ 0.5  // 简化实现
｝

// 字符串处理函数
连接字符串（字符串列表： ［字符串］， 分隔符： 字符串） －》 字符串 ｛
    （课程数量（字符串列表） ＝＝ 0） ？ ｛
        《- 「」
    ｝

    ？ 结果 ＝ 字符串列表［0］
    ？ i ＝ 1
    ＾（i ＜ 课程数量（字符串列表）） ｛
        结果 ＋＝ 分隔符 ＋ 字符串列表［i］
        i ＋＝ 1
    ｝
    《- 结果
｝

// 学科管理类
＠ 学科 ｛
    名称： 字符串，
    学分： 整数，
    难度： 浮点数，
    是否必修： 布尔
｝

＆ 学科 ｛
    学科（名称： 字符串， 学分： 整数， 难度： 浮点数， 是否必修： 布尔） ｛
        《- 学科 ｛
            名称： 名称，
            学分： 学分，
            难度： 难度，
            是否必修： 是否必修
        ｝
    ｝

    获取描述（） －》 字符串 ｛
        ？ 类型 ＝ ＿．是否必修 ？ 「必修」 ： 「选修」
        《- ＿．名称 ＋ 「（」 ＋ 类型 ＋ 「课程，」 ＋ ＿．学分 ＋ 「学分）」
    ｝

    是否困难（） －》 布尔 ｛
        《- ＿．难度 ＞ 7.0
    ｝
｝