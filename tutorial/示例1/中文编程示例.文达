// polyglot 纯中文编程示例
// 展示 polyglot 语言的中文编程能力

主函数() {
    >>("=== polyglot 纯中文编程示例 ===")

    // 1. 中文变量和基本操作
    >>("\n1. 中文变量:")
    ? 姓名 = "张三"
    ? 年龄 = 25
    ? 身高 = 175.5
    ? 是学生 = true

    >>("姓名: " + 姓名)
    >>("年龄: " + 年龄)
    >>("身高: " + 身高 + "cm")
    >>("是否为学生: " + 是学生)

    // 2. 中文数学运算
    >>("\n2. 数学计算:")
    ? 数学成绩 = 85
    ? 语文成绩 = 92
    ? 英语成绩 = 78
    ? 总分 = 数学成绩 + 语文成绩 + 英语成绩
    ? 平均分 = 总分 / 3.0

    >>("数学: " + 数学成绩 + "分")
    >>("语文: " + 语文成绩 + "分")
    >>("英语: " + 英语成绩 + "分")
    >>("总分: " + 总分 + "分")
    >>("平均分: " + 平均分 + "分")

    // 3. 中文条件判断
    >>("\n3. 成绩评级:")
    ? 等级 = ""
    (平均分 >= 90) ? {
        等级 = "优秀"
    } : (平均分 >= 80) ? {
        等级 = "良好"
    } : (平均分 >= 70) ? {
        等级 = "中等"
    } : (平均分 >= 60) ? {
        等级 = "及格"
    } : {
        等级 = "不及格"
    }
    >>("成绩等级: " + 等级)

    // 4. 中文数组操作
    >>("\n4. 课程列表:")
    ? 课程列表 = ["数学", "语文", "英语", "物理", "化学"]
    ? 索引 = 0

    >>("本学期课程:")
    ^(索引 < 课程数量(课程列表)) {
        >>((索引 + 1) + ". " + 课程列表[索引])
        索引 = 索引 + 1
    }

    // 5. 中文循环结构
    >>("\n5. 倒计时:")
    ? 倒计时 = 5
    ^(倒计时 > 0) {
        >>("倒计时: " + 倒计时)
        倒计时 = 倒计时 - 1
    }
    >>("时间到！")

    // 6. 使用中文对象
    >>("\n6. 学生信息管理:")
    ? 学生1 = 学生("李四", 20, "计算机科学")
    ? 学生2 = 学生("王五", 19, "数学系")

    学生1.显示信息()
    学生2.显示信息()

    // 计算年龄差
    ? 年龄差 = 学生1.获取年龄差(学生2)
    >>("两位学生年龄相差: " + 年龄差 + "岁")

    // 7. 中文模式匹配
    >>("\n7. 星期判断:")
    ? 今天 = 3
    ? 星期名 = ""

    #(今天) {
        1 => 星期名 = "星期一",
        2 => 星期名 = "星期二",
        3 => 星期名 = "星期三",
        4 => 星期名 = "星期四",
        5 => 星期名 = "星期五",
        6 => 星期名 = "星期六",
        7 => 星期名 = "星期日",
        _ => 星期名 = "无效日期"
    }
    >>("今天是: " + 星期名)

    // 8. 中文函数调用
    >>("\n8. 问候语生成:")
    ? 问候语 = 生成问候语(姓名, 年龄)
    >>(问候语)

    ? 祝福语 = 根据时间生成祝福("上午")
    >>(祝福语)

    <- 0
}

// 学生类定义 - 使用中文
@ 学生 {
    姓名: s,
    年龄: i,
    专业: s
}

// 学生类实现
& 学生 {
    // 中文构造函数
    学生(姓名: s, 年龄: i, 专业: s) {
        <- 学生 {
            姓名: 姓名,
            年龄: 年龄,
            专业: 专业
        }
    }

    // 显示学生信息
    显示信息() {
        >>("学生信息:")
        >>("  姓名: " + _.姓名)
        >>("  年龄: " + _.年龄 + "岁")
        >>("  专业: " + _.专业)
    }

    // 获取年龄
    获取年龄() -> i {
        <- _.年龄
    }

    // 计算与另一个学生的年龄差
    获取年龄差(其他学生: 学生) -> i {
        ? 差值 = _.年龄 - 其他学生.年龄
        (差值 < 0) ? {
            <- -差值
        } : {
            <- 差值
        }
    }

    // 判断是否成年
    是否成年() -> b {
        <- _.年龄 >= 18
    }

    // 更新年龄
    过生日() {
        _.年龄 += 1
        >>(_.姓名 + " 生日快乐！现在" + _.年龄 + "岁了。")
    }
}

// 中文辅助函数
生成问候语(姓名: s, 年龄: i) -> s {
    (年龄 < 18) ? {
        <- "你好，" + 姓名 + "小朋友！"
    } : (年龄 < 60) ? {
        <- "你好，" + 姓名 + "！"
    } : {
        <- "您好，" + 姓名 + "老师！"
    }
}

// 根据时间生成祝福语
根据时间生成祝福(时段: s) -> s {
    #(时段) {
        "上午" => <- "早上好！祝您有美好的一天！",
        "下午" => <- "下午好！工作顺利！",
        "晚上" => <- "晚上好！祝您休息愉快！",
        _ => <- "你好！祝您一切顺利！"
    }
}

// 计算课程数量
课程数量(课程数组) -> i {
    <- 5  // 简化实现
}

// 数学计算函数
计算平方(数字: F) -> F {
    <- 数字 * 数字
}

// 判断奇偶数
是奇数(数字: i) -> b {
    <- (数字 % 2) == 1
}

// 计算阶乘
阶乘(数字: i) -> i {
    (数字 <= 1) ? {
        <- 1
    } : {
        <- 数字 * 阶乘(数字 - 1)
    }
}